snippet do "do while"
do {
  ${2://stuff}
} while (${1:condition});
endsnippet

snippet p "process"
process.${1:stdin}
endsnippet

snippet ex "expect"
expect(${1:thing}).${2:to}.$3
endsnippet

snippet while "while"
while (${1:condition}n){
  ${2://stuff}
}
endsnippet

snippet req "require"
var ${2:$1} = require('${1:module}');
endsnippet

snippet des "describe : class"
describe('${1:Class}', function(){
  ${2://something}
});
endsnippet

snippet des "describe : method"
describe('${2:method()}', function(){
  it('${1:can...}');
});
endsnippet

snippet it "describes behaviour : pending"
it('${1:can do such and such}');
endsnippet

snippet it "describes behaviour : no-pending"
it('${1:can do such and such}', function(){
  ${2://asser, expect, should}
});
endsnippet

snippet arg "process.argv"
process.argv[${1:2}]$2
endsnippet

snippet on "on event listener"
${2:server}.on('${1:event}', function(${3:req, res}){
  ${4://something}
});
endsnippet

snippet evem "create an event emitter"
var events = require('events');
var EventEmitter = events.EventEmitter;

var ${1:thing} = new EventEmitter();
endsnippet

snippet f "function anonymous" i
function(${1:arg}){
  $2
}
endsnippet

snippet f "function named"
function ${1:name}(${2:args}){
  $3
}
endsnippet

snippet f "function named with var"
var ${1:name} = function(${2:args}){
  $3
};
endsnippet

snippet f "function self-invoking"
(function(${1:args}){
  $2
})()${3:;}
endsnippet


snippet try "try"
try {
  ${1://something}
}
endsnippet

snippet catch "catch"
catch(${1:e}){
  ${2://something}
}
endsnippet

snippet mf "function in module"
${3:functionname}:function(){
  ${4://something}
}
endsnippet

snippet v "var something"
var ${1:var_name} = ${2://something}
endsnippet

snippet c "console.log"
console.log(${1:thing});
endsnippet

snippet for "for loop"
for (var ${1:i}=${2:0}; $1 ${3:<} ${4:thing}; $1 += ${5:1}){
  ${6://something}
}
endsnippet

snippet class "create class"
// Constructor
var ${1:Class} = function(${2:x}, ${3:y}){
  this.$2 = $2;
  this.$3 = $3;
}

// properties and methods
$1.prototype = {
  $2: "default_value_x",
  ${4:method}: function(${5:arg}){
    ${6://something}
  }
};

// node.js module export
module.exports = $1;
endsnippet

snippet module "create module"
var ${1:mymodule} = (function(){
  ${2://something}
  return {
    ${3:functionname}:function(){
      ${4://something}
    }
  }
}());
endsnippet

snippet comm "create a common module for sharing state modules"
var ${1:Common} = {
  ${2:util}: require('$2'),
  ${3:fs}:   require('$3'),
  ${4:path}: require('$4')
};
 
module.exports = $1;
 
// in other modules...  var $1 = require('./$1.js');
endsnippet

snippet re "require"
var $1 = require('${1:http}');
endsnippet

snippet l "listen"
${1:app}.listen(${2:8080});
endsnippet

snippet if "early return"
if (${1:err}) return ${2:cb}($1);
$3
endsnippet

snippet if "if else"
if (${1:err}){
  ${2://todo}
} else {
  ${3://todo}
}
endsnippet
